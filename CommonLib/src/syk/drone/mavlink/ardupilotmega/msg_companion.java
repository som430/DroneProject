/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE COMPANION PACKING
package syk.drone.mavlink.ardupilotmega;
import syk.drone.mavlink.MAVLinkPacket;
import syk.drone.mavlink.Messages.MAVLinkMessage;
import syk.drone.mavlink.Messages.MAVLinkPayload;

/**
* Companion user defined message
*/
public class msg_companion extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_COMPANION = 229;
    public static final int MAVLINK_MSG_LENGTH = 113;
    private static final long serialVersionUID = MAVLINK_MSG_ID_COMPANION;


      
    /**
    * Number value (for the specific request or response).
    */
    public float param1;
      
    /**
    * Number value (for the specific request or response).
    */
    public float param2;
      
    /**
    * System ID.
    */
    public short target_system;
      
    /**
    * Component ID.
    */
    public short target_component;
      
    /**
    * Request number
    */
    public byte request;
      
    /**
    * Response number (it is equal to request number)
    */
    public byte response;
      
    /**
    * Response Status number(200: ok, 404: wrong request, 500: wrong response)
    */
    public byte status;
      
    /**
    * Text content (for the specific request or response).
    */
    public byte param3[] = new byte[100];
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_COMPANION;
              
        packet.payload.putFloat(param1);
              
        packet.payload.putFloat(param2);
              
        packet.payload.putUnsignedByte(target_system);
              
        packet.payload.putUnsignedByte(target_component);
              
        packet.payload.putByte(request);
              
        packet.payload.putByte(response);
              
        packet.payload.putByte(status);
              
        
        for (int i = 0; i < param3.length; i++) {
            packet.payload.putByte(param3[i]);
        }
                    
        
        return packet;
    }

    /**
    * Decode a companion message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.param1 = payload.getFloat();
              
        this.param2 = payload.getFloat();
              
        this.target_system = payload.getUnsignedByte();
              
        this.target_component = payload.getUnsignedByte();
              
        this.request = payload.getByte();
              
        this.response = payload.getByte();
              
        this.status = payload.getByte();
              
         
        for (int i = 0; i < this.param3.length; i++) {
            this.param3[i] = payload.getByte();
        }
                
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_companion(){
        msgid = MAVLINK_MSG_ID_COMPANION;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_companion(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_COMPANION;
        unpack(mavLinkPacket.payload);        
    }

                   
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setParam3(String str) {
        int len = Math.min(str.length(), 100);
        for (int i=0; i<len; i++) {
            param3[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<100; i++) {            // padding for the rest of the buffer
            param3[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getParam3() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 100; i++) {
            if (param3[i] != 0)
                buf.append((char) param3[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_COMPANION - sysid:"+sysid+" compid:"+compid+" param1:"+param1+" param2:"+param2+" target_system:"+target_system+" target_component:"+target_component+" request:"+request+" response:"+response+" status:"+status+" param3:"+param3+"";
    }
}
        